knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(bayesm)
library(data.table)
library(knitr)
library(flextable)
library(tidyverse)
rbiNormGibbs(initx=2, inity =-2, 0.5, burnin=100, R=800)
??rtrun
set.seed(66)
rtrun(mu=c(rep(0,10)), sigma=c(rep(1,10)), a=c(rep(0,10)), b=c(rep(2,10)))
a <- rtrun(mu=c(rep(0,10)), sigma=c(rep(1,10)), a=c(rep(0,10)), b=c(rep(2,10)))
hist(a)
??c
??rep
rep(1:4, 2)
rep(1:4, 2)
rep(1:4, each = 2)
rep(1:4, c(2,1,2,1))
a <- rtrun(mu=c(rep(0,10000)), sigma=c(rep(1,10000)), a=c(rep(0,10000)), b=c(rep(2,10000)))
hist(a)
density(a)
a <- rtrun(mu=c(rep(2,10000)), sigma=c(rep(1,10000)), a=c(rep(0,10000)), b=c(rep(2,10000)))
hist(a)
a <- rtrun(mu=c(rep(1000,10000)), sigma=c(rep(1,10000)), a=c(rep(0,10000)), b=c(rep(2,10000)))
hist(a)
a <- rtrun(mu=c(rep(100,10000)), sigma=c(rep(1,10000)), a=c(rep(0,10000)), b=c(rep(2,10000)))
hist(a)
a <- rtrun(mu=c(rep(10,10000)), sigma=c(rep(1,10000)), a=c(rep(0,10000)), b=c(rep(2,10000)))
hist(a)
a <- rtrun(mu=c(rep(0,10000)), sigma=c(rep(1,10000)), a=c(rep(0,10000)), b=c(rep(2,10000)))
hist(a)
a <- rtrun(mu=c(rep(0,10000)), sigma=c(rep(1,10000)), a=c(rep(0,10000)), b=c(rep(Inf,10000)))
hist(a)
a <- rtrun(mu=c(rep(0,10000)), sigma=c(rep(1,10000)), a=c(rep(30,10000)), b=c(rep(Inf,10000)))
hist(a)
a <- rtrun(mu=c(rep(0,10000)), sigma=c(rep(1,10000)), a=c(rep(0,10000)), b=c(rep(Inf,10000)))
hist(a)
a <- rtrun(mu=c(rep(25,10000)), sigma=c(rep(1,10000)), a=c(rep(0,10000)), b=c(rep(Inf,10000)))
hist(a)
a <- rtrun(mu=c(rep(0,10000)), sigma=c(rep(1,10000)), a=c(rep(2,10000)), b=c(rep(Inf,10000)))
hist(a)
a <- rtrun(mu=c(rep(0,10000)), sigma=c(rep(1,10000)), a=c(rep(4,10000)), b=c(rep(Inf,10000)))
hist(a)
a <- rtrun(mu=c(rep(0,10000)), sigma=c(rep(1,10000)), a=c(rep(10,10000)), b=c(rep(Inf,10000)))
hist(a)
a <- rtrun(mu=c(rep(0,10000)), sigma=c(rep(1,10000)), a=c(rep(7,10000)), b=c(rep(Inf,10000)))
hist(a)
a <- rtrun(mu=c(rep(0,10000)), sigma=c(rep(1,10000)), a=c(rep(7,10000)), b=c(rep(Inf,10000)))
hist(a)
a <- rtrun(mu=c(rep(0,10000)), sigma=c(rep(1,10000)), a=c(rep(7,10000)), b=c(rep(Inf,10000)))
hist(a)
a <- rtrun(mu=c(rep(0,10000)), sigma=c(rep(1,10000)), a=c(rep(6,10000)), b=c(rep(Inf,10000)))
hist(a)
a <- rtrun(mu=c(rep(0,10000)), sigma=c(rep(1,10000)), a=c(rep(6,10000)), b=c(rep(Inf,10000)))
hist(a)
rbiNormGibbs(initx=2, inity=-2, rho, burnin=100, R=500)
rbiNormGibbs(initx=2, inity=-2, rho=0.5, burnin=100, R=500)
x <- rbiNormGibbs(initx = 2, inity = -2, rho =0.5, burnin = 100, R = 10000 )
library(bayesm)
library(data.table)
library(knitr)
library(flextable)
library(tidyverse)
library(tmvtnorm)
x <- rbiNormGibbs(initx = 2, inity = -2, rho =0.5, burnin = 100, R = 10000 )
rbiNormGibbs(initx = 2, inity = -2, rho =0.5, burnin = 100, R = 10000 )
rbiNormGibbs
library(LaplacesDemon)
library(bayesm)
library(data.table)
library(knitr)
library(flextable)
library(tidyverse)
library(tmvtnorm)
library(car)
rbiNormGibbs
a<- rbiNormGibbs(initx =2, inity =-2, rho, burnin =100, R = 10000)
a<- rbiNormGibbs(initx =2, inity =-2, rho=0.5, burnin =100, R = 10000)
a<- rbiNormGibbs(initx =2, inity =-2, rho=-0.9, burnin =100, R = 10000)
y =rnorm(1)
rtruncnorm
library(tmvtnorm)
library(LaplacesDemon)
library(bayesm)
library(data.table)
library(knitr)
library(flextable)
library(tidyverse)
library(tmvtnorm)
rbiTrunNormGibbs <- function (initx = 2, inity = -2, rho, burnin = 100, R = 500)
{
kernel = function(x, mu, rooti) {
z = as.vector(t(rooti) %*% (x - mu))
(z %*% z)
}
if (missing(rho)) {
pandterm("Requires rho argument ")
}
cat("Bivariate Truncated Normal Gibbs Sampler", fill = TRUE)
cat("rho= ", rho, fill = TRUE)
cat("initial x,y coordinates= (", initx, ",", inity, ")",
fill = TRUE)
cat("burn-in= ", burnin, " R= ", R, fill = TRUE)
cat(" ", fill = TRUE)
cat(" ", fill = TRUE)
sd = (1 - rho^2)^(0.5)
sigma = matrix(c(1, rho, rho, 1), ncol = 2)
rooti = backsolve(chol(sigma), diag(2))
mu = c(0, 0)
x = seq(-3.5, 3.5, length = 100)
y = x
z = matrix(double(100 * 100), ncol = 100)
for (i in 1:length(x)) {
for (j in 1:length(y)) {
z[i, j] = kernel(c(x[i], y[j]), mu, rooti)
}
}
prob = c(0.1, 0.3, 0.5, 0.7, 0.9, 0.99)
lev = qchisq(prob, 2)
par(mfrow = c(1, 1))
contour(x, y, z, levels = lev, labels = prob, xlab = "theta1",
ylab = "theta2", drawlabels = TRUE, col = "green", labcex = 1.3,
lwd = 2)
title(paste("Gibbs Sampler with Intermediate Moves: Rho =",
rho))
points(initx, inity, pch = "B", cex = 1.5)
oldx = initx
oldy = inity
continue = "y"
r = 0
draws = matrix(double(R * 2), ncol = 2)
draws[1, ] = c(initx, inity)
cat(" ")
cat("Starting Gibbs Sampler ....", fill = TRUE)
cat("(hit enter or y to display moves one-at-a-time)", fill = TRUE)
cat("('go' to paint all moves without stopping to prompt)",
fill = TRUE)
cat(" ", fill = TRUE)
while (continue != "n" && r < R) {
if (continue != "go")
continue = readline("cont?")
newy = sd * rtruncnorm(1) + rho * oldx
lines(c(oldx, oldx), c(oldy, newy), col = "magenta",
lwd = 1.5)
newx = sd * rtruncnorm(1) + rho * newy
lines(c(oldx, newx), c(newy, newy), col = "magenta",
lwd = 1.5)
oldy = newy
oldx = newx
r = r + 1
draws[r, ] = c(newx, newy)
}
continue = readline("Show Comparison to iid Sampler?")
if (continue != "n" & continue != "No" & continue != "no") {
par(mfrow = c(1, 2))
contour(x, y, z, levels = lev, xlab = "theta1", ylab = "theta2",
drawlabels = TRUE, labels = prob, labcex = 1.1, col = "green",
lwd = 2)
title(paste("Gibbs Draws: Rho =", rho))
points(draws[(burnin + 1):R, ], pch = 20, col = "magenta",
cex = 0.7)
idraws = t(chol(sigma)) %*% matrix(rtruncnorm(2 * (R - burnin)),
nrow = 2)
idraws = t(idraws)
contour(x, y, z, levels = lev, xlab = "theta1", ylab = "theta2",
drawlabels = TRUE, labels = prob, labcex = 1.1, col = "green",
lwd = 2)
title(paste("IID draws: Rho =", rho))
points(idraws, pch = 20, col = "magenta", cex = 0.7)
}
attributes(draws)$class = c("bayesm.mat", "mcmc")
attributes(draws)$mcpar = c(1, R, 1)
return(draws)
}
rbiTrunNormGibbs(initx=2,inity=-2,rho=0.5,burnin=100, R=10000)
library(truncorm)
install.packages(truncnorm)
install.packages("truncnorm")
install.packages("C:/Users/fabio/Downloads/truncnorm_1.0-8.zip", repos = NULL, type = "win.binary")
library(LaplacesDemon)
library(bayesm)
library(data.table)
library(knitr)
library(flextable)
library(tidyverse)
library(tmvtnorm)
library(truncnorm)
install.packages("C:/Users/fabio/Downloads/truncnorm_1.0-8.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/fabio/Downloads/truncnorm_1.0-8(1).zip", repos = NULL, type = "win.binary")
install.packages("testthat")
